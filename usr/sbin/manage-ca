#!/bin/bash

# Licensed under MIT License. Use at your own risk.
#
# References:
#  https://jamielinux.com/docs/openssl-certificate-authority/index.html
#  http://www.goodmami.org/2011/07/04/Simple-logging-in-BASH-scripts.html

############################################################
# Setup                                                    #
############################################################

# I don't care about case.
shopt -s nocasematch

# Default variables
version="0.1"
configfile="/etc/ca-manager/ca-manager.conf"
noperms=0

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

interrupt_c() {
	echo CTRL-C Pressed!!
	exit 255
}

interrupt_other() {
	another interrupt was done. Exiting.
	exit
}

exit_cmd() {
	echo Finished.
	exit
}

trap exit_cmd EXIT
trap interrupt_c SIGINT
trap interrupt_other SIGHUP SIGTERM

# Logging functionality

exec 3>&2 # logging stream (file descriptor 3) defaults to STDERR
verbosity=5 # default to show warnings
silent_lvl=0
crt_lvl=1
err_lvl=2
wrn_lvl=3
dbg_lvl=4
inf_lvl=5

notify() { log $silent_lvl "NOTE: $1"; } # Always prints
critical() { log $crt_lvl "CRITICAL: $1"; }
error() { log $err_lvl "ERROR: $1"; }
warn() { log $wrn_lvl "WARNING: $1"; }
debug() { log $dbg_lvl "DEBUG: $1"; }
inf() { log $inf_lvl "INFO: $1"; } # "info" is already a command
log() {
    if [ $verbosity -ge $1 ]; then
        datestring=`date +'%Y-%m-%d %H:%M:%S'`
        # Expand escaped characters, wrap at 70 chars, indent wrapped lines
        echo -e "$datestring $2" | fold -w100 -s | sed '2~1s/^/  /' >&3
    fi
}

############################################################
# Help Functions                                           #
############################################################

help_main() {
	echo ""
	echo "Usage: $0 [options] <COMMAND>"
	echo "	COMMAND: list, new, config, help, sign, export, import"
	echo "	Use help <COMMAND> to find help"
}

help_funct() {
	echo "CA Key Manager $version Help"
	if `type help_funct_$1 &> /dev/null`; then
		help_funct_$1
	elif [[ $1 == "" ]]; then
		help_main
	elif [[ $1 == "-h" || $1 == "--help" ]]; then
		help_funct_help
	else
		error "Command not found. Either help has not been written for that command or it doesn't exist"
	fi
}

help_funct_help() {
	echo -e "${GREEN}The Help Command:${NC}"
	echo    ""
	echo -e "Syntax: ${BLUE}$0 help <COMMAND>${NC}"
	echo	""
	echo -e "    ${BLUE}COMMAND${NC}:"
	echo -e "       Valid options: ${RED}help${NC}, ${RED}list${NC}, ${RED}new${NC}, ${RED}revoke${NC}, ${RED}delete${NC}"
	echo    ""
}

help_funct_list() {
	echo "${GREEN}The List Command:${NC}"
	echo    ""
	echo -e "Syntax: ${BLUE}$0 list [<TYPE>]${NC}"
	echo	""
	echo -e "    ${BLUE}TYPE${NC}:"
	echo -e "        The type of certificate. Valid"
	echo -e "        options are ${RED}root${NC}, ${RED}intermediate${NC}, ${RED}user${NC}, "
	echo -e "        or ${RED}server${NC} (or ${RED}site${NC}). All types except root will "
	echo	"        need the authority argument specifying what certificate."
	echo -e "        ${BLUE}AUTHORITY${NC} to use."
}
help_funct_config() {
	echo "${GREEN}The Config Command:${NC}"
	echo    ""
	echo -e "Syntax: ${BLUE}$0 config [<SECTION>]${NC}"
	echo	""
	echo -e "    ${BLUE}SECTION${NC}:"
	echo    "        The section that you want to configure. Can be a name of a authority,"
	echo -e "        user, site or ${RED}global${NC}. If no more arguments given, the "
	ehco    "        command will be interactive."
}

help_funct_new() {
	echo    "${GREEN}The New Command:${NC}" # its actually quite old
	echo    ""
	echo -e "  Syntax: ${BLUE}$0 new <TYPE> <NAME> [<AUTHORITY>]${NC}"
	echo	""
	echo -e "    ${BLUE}TYPE${NC}:"
	echo -e "        The type of certificate that is desired. Valid"
	echo -e "        options are ${RED}root${NC}, ${RED}intermediate${NC}, ${RED}user${NC}, "
	echo -e "        or ${RED}server${NC} (or ${RED}site${NC}). All types except root will "
	echo	"        need the authority argument specifying what certificate."
	echo -e "        ${BLUE}AUTHORITY${NC} to use."
	echo	""
	echo -e "    ${BLUE}NAME${NC}:"
	echo -e "        Any name that has not been used before and has completely"
	echo	"        allowable characters. You will be prompted for a name that "
	echo	"        has been used before asking if you want to replace it."
	echo	""
	echo -e "    ${BLUE}AUTHORITY${NC}:"
	echo -e "        Not needed for the ${RED}root${NC} type. Specifies the certificate"
	echo	"        authority"
}

############################################################
# Config                                                   #
############################################################

generate_ssl_config() {
# TODO: Finish openssl.cnf generation (with option to create the main CA or an intermediate CA)
if [[ $1 == "root" ]]; then
	policy="policy_strict"
else
	policy="policy_loose"
fi
cat <<-EOFILE  > $directory/$1/openssl.cnf
	[ ca ]
	default_ca	= CA_default		# The default ca section
	
	[ CA_default ]
	dir	              = $directory/$target
	certs	          = \$dir/certs
	crl_dir	          = \$dir/crl
	database          = \$dir/index.txt
	new_certs_dir     = \$dir/newcerts
	certificate	      = \$dir/certs/$target.cert.pem 
	serial		      = \$dir/serial 	
	private_key	      = \$dir/private/$target.key.pem# The private key
	RANDFILE	      = \$dir/private/.rand
	
	# Certificat Revocation Lists
	crl_extensions    = crl_ext
	crlnumber	      = \$dir/crlnumber
	crl		          = \$dir/$target.crl.pem
	default_crl_days  = 30
	
	# Encoding
	default_md        = sha512
	
	name_opt          = ca_default
	cert_opt          = ca_default
	default_days      = 375
	preserve          = no
	policy            = $policy
	
	[ policy_strict ]
	# For root CA
	countryName            = match
	stateOrProvinceName    = match
	organizationName       = match
	organizationalUnitName = optional
	commonName             = supplied
	emailAddress           = optional
	
	[ policy_loose ]
	# For intermediate CA's
	countryName            = optional
	stateOrProvinceName    = optional
	localityName           = optional
	organizationName       = optional
	organizationalUnitName = optional
	commonName             = supplied
	emailAddress           = optional
	
	[ req ]
	# Options for the req tool
	default_bits           = 2048
	distinguished_name     = req_distinguished_name
	string_mask            = utf8only
	default_md             = sha512
	x509_extensions        = v3_ca
	
	[ req_distinguished_name ]
	countryName                     = Country Name (2 letter code)
	stateOrProvinceName             = State or Province Name
	localityName                    = Locality Name
	0.organizationName              = Organization Name
	organizationalUnitName          = Organizational Unit Name
	commonName                      = Common Name
	emailAddress                    = Email Address (Leave Empty)
	
	# Defaults
	countryName_default             = US
	stateOrProvinceName_default     = Florida
	localityName_default            = Pensacola
	0.organizationName_default      = $companyName
	
	[ v3_ca ]
	# Extensions for the CA
	subjectKeyIdentifier    = hash
	authorityKeyIdentifier  = keyid:always,issuer
	basicConstraints        = critical, CA:true, pathlen:1
	keyUsage                = critical, digitalSignature, cRLSign, keyCertSign
	
	[ v3_intermediate_ca ]
	subjectKeyIdentifier    = hash
	authorityKeyIdentifier  = keyid:always,issuer
	basicConstraints        = critical, CA:true, pathlen:0
	keyUsage                = critical, digitalSignature, cRLSign, keyCertSign
	
	[ usr_cert ]
	# Extensions for client certificates ('man x509v3_config').
	basicConstraints = CA:FALSE
	nsCertType = client, email
	nsComment = "OpenSSL Generated Client Certificate"
	subjectKeyIdentifier = hash
	authorityKeyIdentifier = keyid,issuer
	keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
	extendedKeyUsage = clientAuth, emailProtection
	
	[ server_cert ]
	# Extensions for server certificates (man x509v3_config).
	basicConstraints = CA:FALSE
	nsCertType = server
	nsComment = "OpenSSL Generated Server Certificate"
	subjectKeyIdentifier = hash
	authorityKeyIdentifier = keyid,issuer:always
	keyUsage = critical, digitalSignature, keyEncipherment
	extendedKeyUsage = serverAuth
	
	[ crl_ext ]
	authorityKeyIdentifier = keyid:always
	
	[ ocsp ]
	basicConstraints = CA:FALSE
	subjectKeyIdentifier = hash
	authorityKeyIdentifier = keyid,issuer
	keyUsage = critical, digitalSignature
	extendedKeyUsage = critical, OCSPSigning
EOFILE
}

modify_ssl_config() {
	info "Changing ssl config"
	if ! [ -e "$1" ]; then
		critical "SSL Config file does not exist"
		exit 1
	fi
}

# before we read the switches, we need to read the config file, if it exists.
read_my_config() {
	local section="NONE"
	local sectRegex='^\[[[:space:]]*([A-Za-z0-1_]+)[[:space:]]*\]$'
	local varRegex='^([A-Za-z0-9_]*)[[:space:]]*=[[:space:]]*("[[:print:]]*"|[A-Za-z0-9_~\.\/-]*|[[:digit:]]+\.?[[:digit:]]*)[[:space:]]*#?.*'
	local comRegex="^#.*$"
	local lineNo=0
	local items=0
	
	if ! [ -e $configfile ]; then
		critical "Config file not found! I need it to work."
		exit 502
	fi
	
	debug Reading Configuration File
	# parse the file
	while read -r str
	do
		inf "$str"
		((lineNo=lineNo + 1))
		if [[ $str =~ $sectRegex ]]; then
			section=${BASH_REMATCH[1]}
			inf "found section ${BASH_REMATCH[1]}"
		elif [[ $str =~ $varRegex ]]; then
			inf "found variable ${BASH_REMATCH[1]}=${BASH_REMATCH[2]}"
			if [[ $section == "global" ]]; then
			case "${BASH_REMATCH[1]}" in
				directory) 
					if [ -z $directory ]; then
						debug "Set directory variable"
						directory=${BASH_REMATCH[2]} 
						inf "Directory is equal to $directory"
					else
						debug "Directory variable overridden by switch"
					fi
					((items=items + 1))
					;;
				version)
					if [[ ${BASH_REMATCH[2]} != $version ]]; then
						error "Config Version does not match"
						exit 503
					fi
					((items=items + 1)) ;;
				loglevel)
					local regex='^[0-5]{1}$'
					local loglevel=${BASH_REMATCH[2]}
					if [[ $loglevel =~ $regex ]]; then
						verbosity=$loglevel
						echo "Verbosity of Log set to level $verbosity"
					else
						error "Log Level is not a single digit in config file. Must be a number from 0 to 5."
						exit 504
					fi ;;
				ignore_permissions)
					if [[ ${BASH_REGMATCH[2]} == 1 || ${BASH_REGMATCH[2]} == "1" || ${BASH_REGMATCH[2]} == "true" ]]; then
						noperms=1
					fi ;;
				*) 
					warn "Unknown variable on line $lineNo."
			esac; fi
		elif [[ $str =~ $comRegex ]]; then
			inf Found comment on line $lineNo
			continue
		else
			error "Error in config file on line $lineNo."
			exit 555
		fi
	done < $configfile
	if [ $items -lt 2 ]; then
		error "Not enough required elements. I found $items. I am in section $section."
		exit 505
	fi
}

write_my_config() {
	notice "Writing Configuration File"
	critical "Not implemented"
}

config_my_config() {
	echo You are now configuring the settings for this
	# two modes: interactive and set a setting. First time run, will want to run it interactively.
}

############################################################
# Generate Certificates (New Command)                      #
############################################################
mkrootca() {
	# TODO: Alternate directory to store items in. Configure in config file or override with switch.
	# Make the directories that are needed
	# TODO: Test to see if the target is already there. If so, error. Ask for user to delete on their own after checking.
	if [[ $directory == "/" || $directory == "" ]]; then
		critical "I cannot deal with the directory \"$directory\"."
		exit 403
	fi
	cd $directory
	debug "Making directories, index file and serial file"
	if [ -d "$1" ]; then
		warn "Directory exists. Asking user for input."
		echo "Do you want to replace the CA folder? (type yes)"
		read input
		if [[ $input == "yes" ]]; then # case insenstive still set
			inf "User chose to delete folder"
			rm -rf $1
		else
			error "CA Directory exists. User canceled."
			exit 0
		fi
	else
		debug "$directory/$1 does not exist"
	fi
	debug "Making directories, index.txt and serial files."
	mkdir $1
	cd $1
	mkdir certs crl newcerts private
	[[ $noperms == 0 ]] && chmod 700 private
	touch index.txt
	echo 1000 > serial
	debug "Generating the config file"
	generate_ssl_config root $1 # uses directory, target, and type variables
	debug "Generating the private key (4096 bits)"
	echo Generating CA Private Key
	echo Enter a CA password when prompted. Remember it!
	openssl genrsa -aes256 -out private/$1.key.pem 4096
	[[ $noperms == 0 ]] && chmod 400 private/$1.key.pem
	# Now create the public key
	debug Generating CA Certificate
	openssl req -config openssl.cnf -key private/$1.key.pem -new -x509 -days 3650 -sha512 -extensions v3_ca -out certs/$1.cert.pem
	verify=`openssl x509 -noout -text -in certs/$1.cert.pem`
	echo Please check the certificate
	echo $verify
	# TODO: Verify the certificate is correct automatically
	echo
	echo "Is it OK? [Y/n]"
	read check
	if ! [[ $check == "y" || $check == "Y" || $check == "" ]]
	then
		error "Certificate not OK"
		exit 3
	fi
}

############################################################
# Main Program                                             #
############################################################

# Read the arguments until they are no longer switches
while [ $# -gt 0 ]; do
	case "$1" in
		-t|--type)
			shift
			if [ -z "$(echo $1 |grep ^-.)" ]; then
			type="$1"
			shift
			fi ;;
		-d|--directory)
			# Gives alternate directory than what is in config file
			shift
			if [ -z "$(echo $1 |grep ^-.)" ]; then
			directory="$1"
			shift
			fi ;;
		-h|--help)
			# Equivilent of the help command. In fact, does the same if you double the switch.
			shift
			echo "Came through first case."
			help_funct $1
			exit 0 ;;
		-v|--version)
			echo CA Key Manager version $version
			exit 0 ;;
		-c|--config)
			shift
			configfile="$1" ;;
		-*)    
			echo "${0}: ${1}: invalid option" >&2
			help_main >&2
			exit 2 ;;
		*)    break ;; 
	esac
	shift
done
# end of the switches. now for commands
case "$1" in
	list|l)
		echo "Cannot list certificates or CA's" 
		;;
	new|n)
		read_my_config
		shift
		# TODO: New ca, user, or server
		case "$1" in
			root) # New root authority (you only need one)
				shift
				if [[ $1 == "" ]]; then 
					error "I need a name for the CA" 
					exit 1 
				fi
				mkrootca $1
				;;
			intermediate) 
				error "Cannot make new certificates yet" 
				;;
			user) 
				error "Cannot make new certificates yet" 
				;;
			server|site) 
				error "Cannot make new certificates yet" 
				;;
			*) 
				error "No valid certificate type given. Please see \"$0 help new\""
		esac
		;;
	config|c)
		error "Cannot configure. I don't know how" 
		;;
	help|h)
		shift
		help_funct $1 ;;
	sign|s)
		error "Sign not implemented" ;;
	export|e|exp)
		error "Export not implemented" ;;
	import|i|imp)
		error "Import certificate not implemented" ;;
	*)
		if [[ $1 == "" ]]; then
			error "No command given. Try the help command"
		else
			error "Command not found."
		fi
esac
exit 0
# End of the Script
